#include "projects/gt5m/install/PatchLogic.ad"


















module PatchRoot
{
    attribute sPatchSuccess = false;









    method open(context)
    {
        self.sPatchSuccess = false;
        SequenceUtil::pushPage(context, PatchRoot);
        var result = self.sPatchSuccess;
        self.sPatchSuccess = nil;
        return result;
    }



    method close(context)
    {
        SequenceUtil::popPage(context, PatchRoot);
    }







    method onInitialize(context)
    {

        context.pushEvent(main::menu::MScriptEvent(context,PatchRoot, "on_initialize"));
    }

    method on_initialize(context)
    {
        PatchLogic::initialize();

        self.sPatchSuccess = existPatch();
        if (!self.sPatchSuccess)
        {

            PatchLogic::terminate();
            close(context);
            return;
        }

        self.sPatchSuccess = prepareSync();
        if (!self.sPatchSuccess)
        {

            PatchLogic::terminate();
            close(context);
            return;
        }

        self.sPatchSuccess = checkCapacity(context);
        if (!self.sPatchSuccess)
        {

            PatchLogic::terminate();
            close(context);
            return;
        }

        self.sPatchSuccess = install(context, true);
        if (!self.sPatchSuccess)
        {

            PatchLogic::terminate();
            close(context);
            return;
        }

        self.sPatchSuccess = createSaveData(context);
        if (!self.sPatchSuccess)
        {

            PatchLogic::terminate();
            close(context);
            return;
        }

        PatchLogic::terminate();
        close(context);
    }

    method existPatch()
    {
        return !main::pdiext::MSystemPatch::existPatch();
    }


    method prepareSync()
    {
        main::pdiext::MSystemPatch::startPrepare();
        main::pdiext::MSystemPatch::syncPrepare();
        return true;
    }















    method install(context, cancelable)
    {
        var install = PatchLogic::Install(PatchRoot);
        return install.execute(context, cancelable);
    }




    method checkCapacity(context)
    {
        var memory_stick_inserted = main::pdistd::IsMemoryStickInserted();
        if (!memory_stick_inserted)
        {

            DialogUtil::openConfirmDialog(context, DialogUtil::OK,
                                          context.translate(PatchRoot, "SaveDataPSP", "ERROR_SAVE_NO_MS"));
            return false;
        }

        var sz_free = main::pdiext::MSystemPatch::freeKBSize();
        var sz_need = main::pdiext::MSystemPatch::needKBSize();
        if (sz_need > sz_free)
        {
            var sz_need_size = sz_need - sz_free;
            sz_need_size = (sz_need_size + 0x3FF) / 0x400;

            DialogUtil::openConfirmDialog(context, DialogUtil::OK,
                                          context.translate(PatchRoot, "SaveDataPSP",
                                                            "NOT_ENOUGH_DISK_SPACE_FOR_INSTALL").build(sz_need_size));
            return false;
        }
        return true;
    }

    method createSaveData(context)
    {
        var save = PatchLogic::CreateSaveData(PatchRoot);
        return save.execute(context, false);
    }




    method onFinalize(context)
    {
    }




    method onCancel(context)
    {
        return EVENTRESULT_FILTER;
    }
}