// Seemingly unused in favour of ModuleAdhocBattle, possibly GT5 or GT5P leftovers?













module OnlineUtil
{
    static sRaceParameter = main::gtengine::MRaceParameter();
    static sRaceBuildParameter = main::gtengine::MRaceBuildParameter();

    function getGrimServerOptionToInt(server_name, option_name, initial_value)
    {




        return initial_value;
    }





    function getRaceParameter()
    {
        return sRaceParameter;
    }




    function getRaceBuildParameter() {
        return sRaceBuildParameter;
    }





    function setup(context)
    {

        main::RaceOperator.clear();

        var rp = getRaceParameter();
        rp.setDefault();
        rp.online_on = true;
        rp.is_lan = false;
        rp.race_type = main::gtengine::RaceType::TIMEATTACK;
        rp.auto_start_with_session = false;
        rp.entry_max = 4;
        rp.racers_max = 4;
        rp.finish_type = main::gtengine::FinishType::TARGET;
        rp.race_limit_laps = 2;
        rp.time_to_finish = 20000;
        rp.immediate_finish = false;
        rp.start_type = main::gtengine::StartType::GRID;


        var rbp = getRaceBuildParameter();
        rbp.setDefault();
    }




    function beginInternetSession(is_lan = false)
    {


        main::PDINetwork.setDefaultCommunicatorType(main::pdistd::CommunicatorType::SME);
        main::PDINetwork.setNetworkSystem(main::pdistd::NetworkSystemType::STIME);


        main::PDINetwork.clearError();


        if (!main::PDINetwork.isOnline())
            return false;



        if (main::PDINetwork.isInitializedCommunicator())
        {
            return true;
        }



















        var param = Map();




        param["port"] = 5658;
        param["maxObjectNumPerPeer"] = 128;
        param["applicationVersion"] = 2008112501;
        param["isLAN"] = is_lan;
        param["globalBufferSize"] = 0x600 * 0x400;
        param["clientSendBufferSize"] = 0x10 * 0x400;
        param["clientReceiveBufferSize"] = 0x48 * 0x400;
        param["hostSendBufferSize"] = 0x48 * 0x400;
        param["hostReceiveBufferSize"] = 0x18 * 0x400;


        if (!main::PDINetwork.initializeCommunicator(param))
            return false;



        var connect_timeout = getGrimServerOptionToInt("rtime_dme", "connect.timeout", 30);
        var join_timeout = getGrimServerOptionToInt("rtime_dme", "join.timeout", 30);
        var lookup_timeout = getGrimServerOptionToInt("rtime_dme", "lookup.timeout", 30);
        var session_timeout = getGrimServerOptionToInt("rtime_dme", "session.timeout", 30);
        main::PDINetwork.setTimeoutSecond(main::pdistd::TimeoutType::Connect, connect_timeout);
        main::PDINetwork.setTimeoutSecond(main::pdistd::TimeoutType::Join, join_timeout);
        main::PDINetwork.setTimeoutSecond(main::pdistd::TimeoutType::Lookup, lookup_timeout);
        main::PDINetwork.setTimeoutSecond(main::pdistd::TimeoutType::Session, session_timeout);

        return true;
    }




    function endInternetSession()
    {
        var errstr = nil;
        for (var i = 0; ; ++i)
        {
            var nec = main::PDINetwork.getFirstError(i);
            if (nec == 0)
            {
                break;
            }
            if (errstr == nil)
                errstr = "%d".format(nec);
            else
                errstr += ",%d".format(nec);
        }
        {
            var putstr;
            if (errstr != nil)
                putstr = "SN=%s:SO=%s".format(main::PDINetwork.getClientName(), errstr);
        }





        main::PDINetwork.finalizeCommunicator();

    }





    function searchLANEasy(context)
    {
        if (!main::PDINetwork.isInitializedCommunicator())
            beginInternetSession(true);















        return 0;
    }
}