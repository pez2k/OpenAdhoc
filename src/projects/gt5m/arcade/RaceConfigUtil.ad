













module RaceConfigUtil
{





    class RaceConfig
    {
        attribute course = nil;
        attribute generation = nil;
        attribute laps = nil;
        attribute game_mode = nil;
        attribute with_ai = nil;
        attribute battles_num = nil;
        attribute boost = nil;
        attribute driving_line = nil;
        attribute physics_pro = nil;
        attribute delay_ratio = nil;
        attribute shuffle_base = nil;
        attribute shuffle_ratio = nil;
        attribute jackpot_renchan = nil;
        attribute packet_interval = nil;



        method __init__()
        {
            self.course = main::gtengine::MSpecDB::NO_CODE64;
            self.generation = 1;
            self.laps = main::GlobalStatus::game_context.battle_laps;
            self.game_mode = -1;
            self.with_ai = false;
            self.battles_num = 0;
            self.boost = 0;
            self.driving_line = false;
            self.physics_pro = false;
            self.delay_ratio = game_option().battle_delay_ratio;
            self.shuffle_base = game_option().battle_shuffle_base;
            self.shuffle_ratio = game_option().battle_shuffle_ratio;
            self.jackpot_renchan = main::GlobalStatus::game_context.battle_renchan_num;
            self.packet_interval = 100;
        }
        method pack()
        {
            var list = [];
            list.push(self.course);
            list.push(self.generation);
            list.push(self.laps);
            list.push(self.game_mode);
            list.push(self.with_ai);
            list.push(self.battles_num);
            list.push(self.boost);
            list.push(self.driving_line);
            list.push(self.physics_pro);
            list.push(self.delay_ratio);
            list.push(self.shuffle_base);
            list.push(self.shuffle_ratio);
            list.push(self.jackpot_renchan);
            list.push(self.packet_interval);
            return Binary::Pack("uluiibbsbbbbssss", list);
        }
        method unpack(bytedata)
        {
            var list = Binary::Unpack("uluiibbsbbbbssss", bytedata);
            var idx = 0;
            self.course = list[idx]; idx++;
            self.generation = list[idx]; idx++;
            self.laps = list[idx]; idx++;
            self.game_mode = list[idx].toInt(); idx++;
            self.with_ai = list[idx].toInt(); idx++;
            self.battles_num = list[idx].toInt(); idx++;
            self.boost = list[idx].toInt(); idx++;
            self.driving_line = list[idx].toInt(); idx++;
            self.physics_pro = list[idx].toInt(); idx++;
            self.delay_ratio = list[idx].toInt(); idx++;
            self.shuffle_base = list[idx].toInt(); idx++;
            self.shuffle_ratio = list[idx].toInt(); idx++;
            self.jackpot_renchan = list[idx].toInt(); idx++;
            self.packet_interval = list[idx].toInt(); idx++;
        }
        method getSize()
        {
            return self.pack().size;
        }
    }





    function getRaceConfig()
    {
        var rc = RaceConfig();
        var param = main::PDINetwork.getAdHocMatchingSharedObject(0);
        if (param == nil)
        {
            return rc;
        }

        var bytedata = param["data"];
        if (bytedata == nil)
        {
            return rc;
        } else {
            rc.unpack(bytedata);
        }
        return rc;
    }




    function setRaceConfig(rc)
    {
        main::PDINetwork.updateAdHocMatchingSharedObject(0, rc.pack());
    }




    class MemberConfig
    {
        attribute id = nil;
        attribute car = nil;
        attribute color = nil;
        attribute point = nil;

        attribute host = nil;
        attribute auto_drive = nil;
        attribute ready = nil;
        attribute manual = nil;
        attribute assist_asm = nil;

        attribute assist_tcs = nil;
        attribute active_steering = nil;
        attribute physics_pro = nil;
        attribute front_tire = nil;

        attribute rear_tire = nil;



        method __init__()
        {
            self.id = 0;
            self.car = main::gtengine::MSpecDB::NO_CODE64;
            self.color = 0;
            self.point = 0;

            self.host = false;
            self.auto_drive = false;
            self.ready = 0;
            self.manual = false;
            self.assist_asm = false;

            self.assist_tcs = 5;
            self.active_steering = 0;
            self.physics_pro = 0;
            self.front_tire = -1;

            self.rear_tire = -1;
        }
        method pack()
        {
            var list = [];
            list.push(self.id);
            list.push(self.car);
            list.push(self.color);
            list.push(self.point);

            list.push(self.host);
            list.push(self.auto_drive);
            list.push(self.ready);
            list.push(self.manual);
            list.push(self.assist_asm);

            list.push(self.assist_tcs);
            list.push(self.active_steering);
            list.push(self.physics_pro);
            list.push(self.front_tire);
            
            list.push(self.rear_tire);
            return Binary::Pack("lulssbbbbbbbbss", list);
        }
        method unpack(bytedata)
        {
            var list = Binary::Unpack("lulssbbbbbbbbss", bytedata);
            var idx = 0;
            self.id = list[idx]; idx++;
            self.car = list[idx]; idx++;
            self.color = list[idx]; idx++;
            self.point = list[idx]; idx++;

            self.host = list[idx]; idx++;
            self.auto_drive = list[idx]; idx++;
            self.ready = list[idx]; idx++;
            self.manual = list[idx]; idx++;
            self.assist_asm = list[idx]; idx++;

            self.assist_tcs = list[idx]; idx++;
            self.active_steering = list[idx]; idx++;
            self.physics_pro = list[idx]; idx++;
            self.front_tire = list[idx]; idx++;

            self.rear_tire = list[idx]; idx++;
        }
        method getSize()
        {
            return self.pack().size;
        }
    }






    function getMemberConfig(index)
    {
        var mc = MemberConfig();

        if (index < 0)
            return mc;
        

        var objectId = index + 1;
        var param = main::PDINetwork.getAdHocMatchingSharedObject(objectId);
        if (param == nil)
        {
            return mc;
        }

        var bytedata = param["data"];
        if (bytedata == nil)
        {
            return mc;
        } else {
            mc.unpack(bytedata);
        }
        return mc;
    }

    function getMyMemberConfig()
    {
        return getMemberConfig(main::PDINetwork.getAdHocMatchingMyIndex());
    }




    function setMemberConfig(mc)
    {
        var myIndex = main::PDINetwork.getAdHocMatchingMyIndex();
        if (myIndex < 0)
        {
            return;
        }

        var objectId = myIndex + 1;
        main::PDINetwork.updateAdHocMatchingSharedObject(objectId, mc.pack());
    }







    class TradeConfig
    {
        attribute car_list = nil;
        attribute col_list = nil;
        attribute state_list = nil;
        attribute phase = nil;



        method __init__()
        {
            self.car_list = Array(1);
            for (var i = 0; i < self.car_list.size; i++)
                self.car_list[i] = main::gtengine::MSpecDB::NO_CODE64;
            self.col_list = Array(1);
            for (var i = 0; i < self.col_list.size; i++)
                self.col_list[i] = 0;
            self.state_list = Array(1);
            for (var i = 0; i < self.state_list.size; i++)
                self.state_list[i] = 0;
            self.phase = 0;
        }
        method pack()
        {
            var list = self.car_list + self.col_list + self.state_list;
            list.push(self.phase);
            return Binary::Pack("lbbb", list);
        }
        method unpack(bytedata)
        {
            var list = Binary::Unpack("lbbb", bytedata);
            var idx = 0;
            self.car_list = list.slice(idx, idx + 1); idx += 1;
            self.col_list = list.slice(idx, idx + 1); idx += 1;
            self.state_list = list.slice(idx, idx + 1); idx += 1;
            self.phase = list[idx]; idx++;
        }
        method getSize()
        {
            return self.pack().size;
        }
    }





    function getTradeConfig(index)
    {
        var tc = TradeConfig();

        if (index < 0)
            return tc;
        

        var objectId = index;
        var param = main::PDINetwork.getAdHocMatchingSharedObject(objectId);
        if (param == nil)
        {
            return tc;
        }

        var bytedata = param["data"];
        if (bytedata == nil)
        {
            return tc;
        } else {
            tc.unpack(bytedata);
        }
        return tc;
    }

    function getMyTradeConfig()
    {
        return getTradeConfig(main::PDINetwork.getAdHocMatchingMyIndex());
    }




    function setTradeConfig(tc)
    {
        var myIndex = main::PDINetwork.getAdHocMatchingMyIndex();
        if (myIndex < 0)
        {
            return;
        }

        var objectId = myIndex;
        main::PDINetwork.updateAdHocMatchingSharedObject(objectId, tc.pack());
    }




    class ShareConfig
    {
        attribute phase = nil;
        attribute give_mode = nil;
        attribute transferring_done = nil;
        attribute pad0 = nil;
        attribute transferring_idx = nil;
        attribute pad1 = nil;
        attribute transferring_crc = nil;
        attribute transferring_size = nil;
        attribute transferring_buffer = nil;




        method __init__()
        {
            self.phase = 0;
            self.give_mode = -1;
            self.transferring_done = false;
            self.pad0 = 0;
            self.transferring_idx = 0;
            self.pad1 = 0;
            self.transferring_crc = 0;
            self.transferring_size = 0;
            self.transferring_buffer = nil;
        }
        method resetOnNewPhase(phase, give_mode, transferring_done_flg)
        {
            self.phase = phase;
            self.give_mode = give_mode;
            if (transferring_done_flg != nil)
                self.transferring_done = transferring_done_flg;
            self.pad0 = 0;
            self.transferring_idx = 0;
            self.pad1 = 0;
            self.transferring_crc = 0;
            self.transferring_size = 0;
            self.transferring_buffer = nil;
        }
        method pack()
        {
            if (self.transferring_buffer != nil)
                self.transferring_size = self.transferring_buffer.size;
            else
                self.transferring_size = 0;

            var list = [
                self.phase,
                self.give_mode,
                self.transferring_done,
                self.pad0,
                self.transferring_idx,
                self.pad1,
                self.transferring_crc,
                self.transferring_size
            ];
            var bytedata = Binary::Pack("bbbbssii", list);
            if (self.transferring_buffer != nil)
            {
                bytedata  = bytedata + self.transferring_buffer;
            }
            return bytedata;
        }
        method unpack(bytedata)
        {
            var list = Binary::Unpack("bbbbssii", bytedata);
            var idx = 0;
            self.phase = list[idx]; idx++;
            self.give_mode = list[idx]; idx++;
            self.transferring_done = list[idx]; idx++;
            self.pad0 = list[idx]; idx++;
            self.transferring_idx = list[idx]; idx++;
            self.pad1 = list[idx]; idx++;
            self.transferring_crc = list[idx]; idx++;
            self.transferring_size = list[idx]; idx++;
            if (bytedata.size > 16)
            {
                self.transferring_buffer = bytedata.getByteData(16);
                self.transferring_buffer.size = self.transferring_size;
            }
            else
            {
                self.transferring_buffer = nil;
            }
        }
        method getSize()
        {
            return self.pack().size;
        }
    }






    function getShareConfig(index)
    {
        var sc = ShareConfig();

        if (index < 0)
            return sc;
        

        var objectId = index;
        var param = main::PDINetwork.getAdHocMatchingSharedObject(objectId);
        if (param == nil)
        {
            return sc;
        }

        var bytedata = param["data"];
        if (bytedata == nil)
        {
            return sc;
        } else {
            sc.unpack(bytedata);
        }
        return sc;
    }

    function getMyShareConfig()
    {
        return getShareConfig(main::PDINetwork.getAdHocMatchingMyIndex());
    }




    function setShareConfig(sc)
    {
        var myIndex = main::PDINetwork.getAdHocMatchingMyIndex();
        if (myIndex < 0)
        {
            return;
        }

        var objectId = myIndex;
        main::PDINetwork.updateAdHocMatchingSharedObject(objectId, sc.pack());
    }
}