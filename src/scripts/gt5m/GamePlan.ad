













class GamePlan
{




    static VERSION = 100;














    module BSpecType
    {
        static BOTH_A_AND_B = 0;
        static ONLY_A = 1;
        static ONLY_B = 2;
    }

    module PlayType
    {
        static RACE = 0;
        static DEMO = 1;
        static GAMBLE = 2;
    }

    module TrackDayType
    {
        static BOTH = 0;
        static TRACKDAY_ONLY = 1;
        static RACE_ONLY = 2;
    }

    class PlayStyle
    {
        attribute bspec_type = nil;
        attribute play_type = nil;
        attribute trackday_type = nil;
        attribute no_quickmenu = nil;
        attribute no_instant_replay = nil;
        attribute window_num = nil;
        attribute time_limit = nil;
        attribute leave_limit = nil;
    }




    class Regulation
    {
        attribute pp = nil;
        attribute tire = nil;
        attribute car_type = nil;
        attribute cars = nil;
        attribute license = nil;
        attribute power = nil;
        attribute torque = nil;
        attribute displacement = nil;
        attribute weight = nil;
        attribute drivetrain = nil;
        attribute aspiration = nil;
        attribute year = nil;
        attribute tuners = nil;
        attribute countries = nil;
    }




    class Constraint
    {
        attribute mission = nil;
        attribute driving_line = nil;
        attribute asm = nil;
        attribute tcs = nil;
        attribute abs = nil;
        attribute tire_f = nil;
        attribute tire_r = nil;
        attribute simulation = nil;
        attribute active_steering = nil;
        attribute cars = nil;
    }





    module BattleType
    {
        static RACE = 0;
        static QUALIFY = 1;
    }

    class Race
    {
        attribute battle_type = nil;
        attribute race_type = nil;
        attribute start_type = nil;
        attribute complete_type = nil;
        attribute finish_type = nil;
        attribute race_limit_laps = nil;
        attribute race_limit_minute = nil;
        attribute time_to_start = nil;
        attribute time_to_finish = nil;
        attribute racers_max = nil;
        attribute immediate_finish = nil;
        attribute grid_sort_type = nil;
        attribute endless = nil;
        attribute with_ghost = nil;
        attribute disable_collision = nil;
        attribute penalty_level = nil;
        attribute accumulation = nil;
        attribute boost_lv = nil;
        attribute lucky_player = nil;
    }




    class Track
    {
        attribute course_code = nil;
        attribute course_layout_no = nil;
        attribute goal_position = nil;
        attribute goal_width = nil;
    }




    class Gadget
    {
        attribute kind = nil;
        attribute id = nil;
        attribute positions = nil;
        attribute posture = nil;
    }




    module GenerateType
    {
        static SHUFFLE = 0;
        static ONE_MAKE = 1;
        static ENEMY_LIST = 2;
        static SPEC_DB = 3;
    }

    class EntryGenerate
    {
        attribute entry_num = nil;
        attribute player_pos = nil;
        attribute generate_type = nil;
        attribute ai_skill = nil;
        attribute ai_skill_breaking = nil; // typo in original
        attribute ai_skill_cornaring = nil; // typo in original
        attribute enemy_lv = nil;
        attribute cars = nil;
        attribute delays = nil;
    }

    class Entry
    {
        
        attribute player_no = nil;
        
        attribute car = nil;
        
        attribute car_parameter = nil;
        
        attribute driver_name = nil;
        
        attribute driver_parameter = nil;
        



        attribute initial_position = nil;
        attribute initial_velocity = nil;
        attribute delay = nil;
    }

    class EntrySet
    {
        attribute entry_generate = nil;
        attribute entries = nil;
    }




    class EvalCondition
    {
        attribute type = nil;
        attribute data = nil;
    }




    class AchieveCondition
    {
        attribute type = nil;
        attribute data = nil;
    }




    class FailureCondition
    {
        attribute type = nil;
        attribute data = nil;
    }




    class OnlineRoom
    {
        attribute comment = nil;
        attribute password = nil;
        attribute modifiable = nil;
        attribute policy = nil;
        attribute chat_type = nil;
        attribute room_max = nil;
        attribute racer_max = nil;
        attribute auto_grant_ownership = nil;
        attribute nat_restriction = nil;
        attribute allow_only_friend = nil;
        attribute exclude_blocklist = nil;
        attribute voice_chat = nil;
        attribute voice_quality = nil;
        attribute race_quality = nil;
        attribute network_topology = nil;
    }




    module RankingType
    {
        static TIME = 0;
        static DRIFT = 1;
    }

    class Ranking
    {
        attribute ranking_type = nil;
        attribute is_local = nil;
        attribute board_id = nil;
    }




    class Reward
    {
        attribute prize_table = nil;
        attribute point_table = nil;
        attribute cars = nil;
        attribute special_reward_code = nil;
    }




    class Information
    {
        attribute title = nil;
        attribute description = nil;
        attribute narration_id = nil;
        attribute logo_image_path = nil;
        attribute logo_image = nil;
        attribute logo_url = nil;
        attribute flier_image_path = nil;
        attribute flier_image = nil;
        attribute flier_url = nil;
        attribute race_label = nil;
    }




    module EventType
    {
        static RACE = 0;
        static QUALIFY = 1;
        static TRACKDAY = 2;
    }

    class Event
    {
        attribute game_mode = nil;
        attribute play_style = nil;
        attribute event_type = nil;
        attribute inheritance = nil;
        attribute regulation = nil;
        attribute constraint = nil;
        attribute race = nil;
        attribute track = nil;
        attribute entry_set = nil;
        attribute eval_condition = nil;
        attribute achieve_condition = nil;
        attribute failure_condition = nil;
        attribute reward = nil;
        attribute ranking = nil;
        attribute information = nil;
        attribute gadgets = nil;
    }




    class Replay
    {
        
        attribute buffer = nil;
        
        attribute url = nil;
        
        attribute information = nil;
    }






    class RaceEditorInfo
    {
        attribute psp_mode = nil;
    }



    
    attribute events = nil;
    attribute online_room = nil;
    attribute series_reward = nil;
    attribute series_information = nil;
    attribute replay_list = nil;
    attribute editor_info = nil;

    method __init__()
    {
        self.events = Array(1);
        self.events[0] = Event();
    }










    module GamePlanImpl {}
    
    static loaded_time = 0;




    function begin()
    {
        if (loaded_time == 0)
        {
            var res = GamePlanImpl.load("/scripts/gt5m/util/GamePlanImpl");
        }

        loaded_time++;
    }




    function end()
    {
        loaded_time--;
        if (loaded_time == 0)
        {
            GamePlanImpl.clearStatic();
        }
    }





    method createRaceParameter()
    {
        begin();
        var rp = GamePlanImpl::createRaceParameter(self);
        end();
        return rp;
    }






    method createXML(for_race)
    {
        begin();
        var xml_data = GamePlanImpl::createXML(self, for_race);
        end();
        return xml_data;
    }






    method parseXML(xml_data)
    {
        begin();
        var ret = GamePlanImpl::parseXML(self, xml_data);
        end();
        return ret;
    }





    method generateEntry(event_idx, player_cp_list)
    {
        begin();
        GamePlanImpl::generateEntry(self, event_idx, player_cp_list);
        end();
    }







    method setupRaceOperator(event_idx, player_cp_list, player_dp_list)
    {
        begin();
        GamePlanImpl::setupRaceOperator(self, event_idx, player_cp_list, player_dp_list)
        end();
    }













    method execute(context, event_idx, player_cp_list, player_dp_list)
    {
        begin();
        GamePlanImpl::execute(context, self, event_idx, player_cp_list, player_dp_list)
        end();
    }


    static execute_next_file = nil;
    function reserveExecuteNext(enf)
    {
        execute_next_file = enf;
    }






    function executeNext()
    {
        var result = false;

        if (execute_next_file != nil)
        {
            var fst = main::pdistd::ReadFile(execute_next_file);
            execute_next_file = nil;
            var buf = fst["buffer"];

            var gp = main::GamePlan();
            var success = gp.parseXML(buf);

            buf = nil;

            gp.begin();
            GamePlanImpl::executeOutOfSequence(gp, nil, nil);
            gp.end();

            result = true;
        }
        else
        {
        }


        return result;
    }

    function executeOutOfSequence(gp, player_cp_list, player_dp_list)
    {
        gp.begin();
        var result = GamePlanImpl::executeOutOfSequence(gp, player_cp_list, player_dp_list);
        gp.end();
        return result;
    }
















    function createSingleRace(course_code, entry_num, arcade_laps, ai_skill, enemy_lv, boost_lv, penalty_level, prize_table, one_make)
    {
        begin();
        var gp = GamePlanImpl::createSingleRace(course_code, entry_num, arcade_laps, ai_skill, enemy_lv, boost_lv, penalty_level, prize_table, one_make);
        end();
        return gp;
    }








    function createAutoDemo(course_code, entry_num)
    {
        begin();
        var gp = GamePlanImpl::createAutoDemo(course_code, entry_num);
        end();
        return gp;
    }





    function createTimeAttack(course_code)
    {
        begin();
        var gp = GamePlanImpl::createTimeAttack(course_code);
        end();
        return gp;
    }







    function createDriftAttack(course_code, layout, endless)
    {
        begin();
        var gp = GamePlanImpl::createDriftAttack(course_code, layout, endless);
        end();
        return gp;
    }






    function createReplay(buf)
    {
        begin();
        var gp = GamePlanImpl::createReplay(buf);
        end();
        return gp;
    }





    function createLicense(course_code)
    {
        begin();
        var gp = GamePlanImpl::createLicense(course_code);
        end();
        return gp;
    }









    function createAdhocBattle(game_mode, course_code, entry_num, laps, prize_table)
    {
        begin();
        var gp = GamePlanImpl::createAdhocBattle(game_mode, course_code, entry_num, laps, prize_table);
        end();
        return gp;
    }





    function sample()
    {
        var ra = GamePlan();
        begin();
        GamePlanImpl::sample();
        end();
    }
}