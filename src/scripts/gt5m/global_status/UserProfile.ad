#include "scripts/gt5m/global_status/GlobalStatus.ad"
#include "scripts/gt5m/global_status/GameConfig.ad"
#include "scripts/gt5m/global_status/GameOption.ad"



















module UserProfile
{





    function clearInitializer()
    {
        CreateModule.clearStatic();
        GameOption::clearInitializer();
    }




    module CreateModule
    {



        function CreateStructure()
        {
            var st = STStructure("Impl");
            UserProfile.defineModule(st);
            st.define("cash", STLong());
            st.define("option", GameOption::CreateModule::CreateStructure());
            st.define("context", GameContext::CreateStructure());
            st.define("garage", STObject(gtengine::MCarCollection));
            st.define("garage_type", STByte());

            st.define("record", main::pdiapp::CreateGameRecordStructure());
            st.define("calendar", STObject(gtengine::MCalendar));
            st.define("have_seen_ed_movie", STByte());
            st.define("event_flags", STShort());
            st.define("message_flags", STShort());
            st.define("cleared_license_category", STArray(STByte(), 17));
            st.define("total_running_km", STFloat());
            st.define("total_cash", STLong());
            st.define("singlerace_count_of_1st", STInt());
            st.define("adhocbattle_count_of_1st", STInt());

            DefineMethod();
            return st;
        }





        function Initialize(instance)
        {
            instance.cash = 100000; // Starting money
            GameOption::CreateModule::Initialize(instance.option);
            GameContext::Initialize(instance.context);

            main::pdiapp::InitializeGameRecord(instance.record);
            instance.garage = gtengine::MCarCollection(main::gtengine::MSpecDB::getCarLabelCount()); // Garage capacity = car count?

            {
                var address_numbers = main::pdistd::MNetworkInterface::getMacAddress().split(":");
                var address = "";
                foreach (var num in address_numbers)
                    address += num;

                address = "0x%{address}".toLong();

                instance.garage_type = address & ((1 << 3) - 1);
            }

            instance.calendar = gtengine::MCalendar();


            var present_cars = [ // Starter cars - randomly selected from via the MAC address calculation above
                "pontiac_vibe_gt_03",
                "_206_s16_99",
                "_147_20_twinspark_02",
                "golf_gti_01",
                "megane_20_16v_02",
                "mini_cooper_02",
                "fit_w_ff_01",
                "_120i_04"
            ];

            var present_car = present_cars[instance.garage_type];
            var carcode = main::gtengine::MSpecDB::getCarCode(present_car);
            instance.garage.addCar(carcode, 0);


            instance.calendar.putGarageEvent("GET_PRESENT", carcode, 0);

            instance.have_seen_ed_movie = false;

            instance.event_flags = 0;
            instance.message_flags = 0;

            for (var i = 0; i < 17; i++) {
                instance.cleared_license_category = false; // Typo in original - should be instance.cleared_license_category[i] = false;
            }
            instance.total_running_km = 0.0;
            instance.total_cash = 0;
            instance.singlerace_count_of_1st = 0;
            instance.adhocbattle_count_of_1st = 0;
        }
    }





    function DefineMethod()
    {

        module Impl
        {








            method apply()
            {

                self.option.apply();
            }




            method setGameContext(gc)
            {
                self.context.deserialize(gc.serialize());
            }




            method getGameContext(gc)
            {
                gc.deserialize(self.context.serialize());
            }




            method getCashString()
            {
                return main::pdiext::MMisc::GetMoneyString(self.cash);
            }
        }

    }
}