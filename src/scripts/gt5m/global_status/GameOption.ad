


















module GameOption
{



    function clearInitializer()
    {
        CreateModule.clearStatic();
    }


    module CreateModule
    {












        function CreateStructure()
        {
            var st = STStructure("Impl");
            GameOption.defineModule(st);




            st.define("language", STByte());




            st.define("unit_velocity", STByte());
            st.define("unit_power", STByte());
            st.define("unit_torque", STByte());
            st.define("unit_temperature", STByte());




            st.define("arcade_laps", STInt());
            st.define("arcade_time_limit", STInt());
            st.define("play_leave_limit", STInt());
            st.define("disable_button_display", STByte());




            st.define("key_config", STObject(gtengine::MController));
            st.define("default_psp", STObject(System::Map));




            st.define("active_steering", STByte());




            st.define("menu_bgm_volume", STShort());
            st.define("menu_se_volume", STShort());
            st.define("race_bgm_volume", STShort());
            st.define("race_se_volume", STShort());
            st.define("replay_bgm_volume", STShort());
            st.define("replay_se_volume", STShort());
            st.define("user_bgm_volume", STShort());
            st.define("menu_bgm", STByte());
            st.define("menu_se", STByte());
            st.define("race_bgm", STByte());
            st.define("race_se", STByte());
            st.define("replay_bgm", STByte());
            st.define("replay_se", STByte());
            st.define("sound_dynamic_range", STByte());
            st.define("eq_speaker", STByte());
            st.define("eq_headphone", STByte());
            st.define("mode_speaker", STByte());
            st.define("mode_headphone", STByte());
            st.define("sysbgm_use", STArray(STByte(), 8));
            st.define("sysbgm_valid", STArray(STByte(), 8));
            st.define("sysbgm_context", STArray(STArray(STByte(), main::pdiext::MSystemBGM::getContextSize()), 8));






            st.define("image_quality", STByte());




            st.define("auto_save", STByte());
            st.define("opening_after_autoload", STByte());

            st.define("limit_favorite_course_only", STByte());
            st.define("favorite_courses", STArray(STULong(), 35));




            st.define("battle_delay_ratio", STShort());
            st.define("battle_shuffle_base", STShort());
            st.define("battle_shuffle_ratio", STShort());

            DefineMethod();

            return st;
        }




        function Initialize(instance)
        {



            instance.unit_velocity = main::pdiext::MUnit::GetCurrentUnitOfVelocity();
            instance.unit_power = main::pdiext::MUnit::GetCurrentUnitOfPower();
            instance.unit_torque = main::pdiext::MUnit::GetCurrentUnitOfTorque();
            instance.unit_temperature = main::pdiext::MUnit::GetCurrentUnitOfTemperature();




            instance.arcade_laps = 2;
            instance.arcade_time_limit = 0;

            instance.play_leave_limit = 0;

            instance.disable_button_display = 0;





            var controller = gtengine::MController();
































































            // Clearly a macro
            for (var port = 0; port < 1; port++) { if ("UP" != nil) controller.declare(main::gtengine::InputMode::PLAY_NORMAL, "PLAYSTATION_PORTABLE", port, "button", main::pdistd::SuperPortButtonBit["UP"]); if (nil != nil) controller.declare(main::gtengine::InputMode::PLAY_NORMAL, "PLAYSTATION_PORTABLE", port, "analog", main::pdistd::SuperPortAnalogChannel[nil]); }
            for (var port = 0; port < 1; port++) { if ("DOWN" != nil) controller.declare(main::gtengine::InputMode::PLAY_NORMAL, "PLAYSTATION_PORTABLE", port, "button", main::pdistd::SuperPortButtonBit["DOWN"]); if (nil != nil) controller.declare(main::gtengine::InputMode::PLAY_NORMAL, "PLAYSTATION_PORTABLE", port, "analog", main::pdistd::SuperPortAnalogChannel[nil]); }
            for (var port = 0; port < 1; port++) { if ("LEFT" != nil) controller.declare(main::gtengine::InputMode::PLAY_NORMAL, "PLAYSTATION_PORTABLE", port, "button", main::pdistd::SuperPortButtonBit["LEFT"]); if (nil != nil) controller.declare(main::gtengine::InputMode::PLAY_NORMAL, "PLAYSTATION_PORTABLE", port, "analog", main::pdistd::SuperPortAnalogChannel[nil]); }
            for (var port = 0; port < 1; port++) { if ("RIGHT" != nil) controller.declare(main::gtengine::InputMode::PLAY_NORMAL, "PLAYSTATION_PORTABLE", port, "button", main::pdistd::SuperPortButtonBit["RIGHT"]); if (nil != nil) controller.declare(main::gtengine::InputMode::PLAY_NORMAL, "PLAYSTATION_PORTABLE", port, "analog", main::pdistd::SuperPortAnalogChannel[nil]); }
            for (var port = 0; port < 1; port++) { if ("CIRCLE" != nil) controller.declare(main::gtengine::InputMode::PLAY_NORMAL, "PLAYSTATION_PORTABLE", port, "button", main::pdistd::SuperPortButtonBit["CIRCLE"]); if (nil != nil) controller.declare(main::gtengine::InputMode::PLAY_NORMAL, "PLAYSTATION_PORTABLE", port, "analog", main::pdistd::SuperPortAnalogChannel[nil]); }
            for (var port = 0; port < 1; port++) { if ("CROSS" != nil) controller.declare(main::gtengine::InputMode::PLAY_NORMAL, "PLAYSTATION_PORTABLE", port, "button", main::pdistd::SuperPortButtonBit["CROSS"]); if (nil != nil) controller.declare(main::gtengine::InputMode::PLAY_NORMAL, "PLAYSTATION_PORTABLE", port, "analog", main::pdistd::SuperPortAnalogChannel[nil]); }
            for (var port = 0; port < 1; port++) { if ("TRIANGLE" != nil) controller.declare(main::gtengine::InputMode::PLAY_NORMAL, "PLAYSTATION_PORTABLE", port, "button", main::pdistd::SuperPortButtonBit["TRIANGLE"]); if (nil != nil) controller.declare(main::gtengine::InputMode::PLAY_NORMAL, "PLAYSTATION_PORTABLE", port, "analog", main::pdistd::SuperPortAnalogChannel[nil]); }
            for (var port = 0; port < 1; port++) { if ("SQUARE" != nil) controller.declare(main::gtengine::InputMode::PLAY_NORMAL, "PLAYSTATION_PORTABLE", port, "button", main::pdistd::SuperPortButtonBit["SQUARE"]); if (nil != nil) controller.declare(main::gtengine::InputMode::PLAY_NORMAL, "PLAYSTATION_PORTABLE", port, "analog", main::pdistd::SuperPortAnalogChannel[nil]); }
            for (var port = 0; port < 1; port++) { if ("L" != nil) controller.declare(main::gtengine::InputMode::PLAY_NORMAL, "PLAYSTATION_PORTABLE", port, "button", main::pdistd::SuperPortButtonBit["L"]); if (nil != nil) controller.declare(main::gtengine::InputMode::PLAY_NORMAL, "PLAYSTATION_PORTABLE", port, "analog", main::pdistd::SuperPortAnalogChannel[nil]); }
            for (var port = 0; port < 1; port++) { if ("R" != nil) controller.declare(main::gtengine::InputMode::PLAY_NORMAL, "PLAYSTATION_PORTABLE", port, "button", main::pdistd::SuperPortButtonBit["R"]); if (nil != nil) controller.declare(main::gtengine::InputMode::PLAY_NORMAL, "PLAYSTATION_PORTABLE", port, "analog", main::pdistd::SuperPortAnalogChannel[nil]); }
            for (var port = 0; port < 1; port++) { if ("START" != nil) controller.declare(main::gtengine::InputMode::PLAY_NORMAL, "PLAYSTATION_PORTABLE", port, "button", main::pdistd::SuperPortButtonBit["START"]); if (nil != nil) controller.declare(main::gtengine::InputMode::PLAY_NORMAL, "PLAYSTATION_PORTABLE", port, "analog", main::pdistd::SuperPortAnalogChannel[nil]); }
            for (var port = 0; port < 1; port++) { if ("SELECT" != nil) controller.declare(main::gtengine::InputMode::PLAY_NORMAL, "PLAYSTATION_PORTABLE", port, "button", main::pdistd::SuperPortButtonBit["SELECT"]); if (nil != nil) controller.declare(main::gtengine::InputMode::PLAY_NORMAL, "PLAYSTATION_PORTABLE", port, "analog", main::pdistd::SuperPortAnalogChannel[nil]); }
            for (var port = 0; port < 1; port++) { if (nil != nil) controller.declare(main::gtengine::InputMode::PLAY_NORMAL, "PLAYSTATION_PORTABLE", port, "button", main::pdistd::SuperPortButtonBit[nil]); if ("STICK_BX1" != nil) controller.declare(main::gtengine::InputMode::PLAY_NORMAL, "PLAYSTATION_PORTABLE", port, "analog", main::pdistd::SuperPortAnalogChannel["STICK_BX1"]); }


            instance.key_config = controller;

            {
                var default_config = controller.getConfig();
                var play_config = default_config[main::gtengine::InputMode::PLAY_NORMAL];


                instance.default_psp = play_config["PLAYSTATION_PORTABLE"];
            }






            instance.active_steering = false;




            instance.menu_bgm_volume = 100;
            instance.menu_se_volume = 100;
            instance.race_bgm_volume = 80;
            instance.race_se_volume = 80;
            instance.replay_bgm_volume = 80;
            instance.replay_se_volume = 80;
            instance.user_bgm_volume = 90;




            


            instance.menu_bgm = 1;
            instance.race_bgm = 1;
            instance.replay_bgm = 1;
            instance.menu_se = 1;
            instance.race_se = 1;
            instance.replay_se = 1;
            instance.sound_dynamic_range = 0;
            instance.eq_speaker = 70;
            instance.eq_headphone = 100;
            instance.mode_speaker = 1;
            instance.mode_headphone = 2;
            for (var i = 0; i < 8; i++)
            {
                instance.sysbgm_use[i] = 0;
                instance.sysbgm_valid[i] = 0;
            }




            instance.image_quality = 0;




            instance.auto_save = true;
            instance.opening_after_autoload = true;

            instance.limit_favorite_course_only = false;
            instance.favorite_courses = [];




            instance.battle_delay_ratio = 1;
            instance.battle_shuffle_base = 500;
            instance.battle_shuffle_ratio = 10;
        }
    }

































    function DefineMethod()
    {

        module Impl
        {





            function LoudnessPercentToAmplitude(percent)
            {
                return (percent.toFloat() / 100.0) ** 1.6666666;
            }

            function BGMPercentToAmplitude(percent, master_volume)
            {
                var v = LoudnessPercentToAmplitude(percent) * master_volume;
                return __toplevel__::System::Math::clamp(v, 0.0, 1.0);
            }

            function set_output_mode(index, mode, eq_level, gain)
            {

                var mode_table = [
                    [1, main::pdiext::OUTPUTMONAURALMODE::MONAURAL_NORMAL],
                    [2, main::pdiext::OUTPUTSTEREOMODE::STEREO_NORMAL],
                    [2, main::pdiext::OUTPUTSTEREOMODE::STEREO_DOLBY_PL2]
                ];
                var channels = mode_table[mode][0];
                var option = mode_table[mode][1];
                var type = (eq_level >= 100 && gain == 1.0) ? "none" : "lpf";
                var fc = (2.0 ** ((eq_level.toFloat() / 25.0) - 4.0)) * 22050.0;
                main::sound_context.setOutputModeParameter(index, channels, option, type, fc, gain);
            }





            method apply()
            {

                main::pdiext::MUnit::SetUnitOfVelocity(self.unit_velocity);
                main::pdiext::MUnit::SetUnitOfPower(self.unit_power);
                main::pdiext::MUnit::SetUnitOfTorque(self.unit_torque);
                main::pdiext::MUnit::SetUnitOfTemperature(self.unit_temperature);


                main::pdiext::MSystemConfiguration::SetTemporalAntialias(self.image_quality == 0 ? 1 : 0);


                if (main["drc_preset"] != nil)
                {
                    var drc = self.sound_dynamic_range;
                    var preset = main::drc_preset[drc];




                    if (main["sound_runtime_parameter"] != nil)
                    {
                        var bgmvol = preset['bgm_master_volume'];
                        var p = main::sound_runtime_parameter;
                        p.menu_bgm = self.menu_bgm;
                        p.menu_se = self.menu_se;
                        p.race_bgm = self.race_bgm;
                        p.race_se = self.race_se;
                        p.replay_bgm = self.replay_bgm;
                        p.replay_se = self.replay_se;
                        p.sound_dynamic_range = self.sound_dynamic_range;

                        p.menu_bgm_gain = BGMPercentToAmplitude(self.menu_bgm_volume, bgmvol);
                        p.race_bgm_gain = BGMPercentToAmplitude(self.race_bgm_volume, bgmvol);
                        p.replay_bgm_gain = BGMPercentToAmplitude(self.replay_bgm_volume, bgmvol);
                        p.user_bgm_gain = LoudnessPercentToAmplitude(self.user_bgm_volume);
                        p.menu_se_gain = LoudnessPercentToAmplitude(self.menu_se_volume);
                        p.race_se_gain = LoudnessPercentToAmplitude(self.race_se_volume);
                        p.replay_se_gain = LoudnessPercentToAmplitude(self.replay_se_volume);
                        p.movie_gain = preset['movie_master_volume'];
                        p.na_gain = preset['na_master_volume'];


                        for (var i = 0; i < 2; i++)
                        {
                            var path = nil;
                            switch (self.sysbgm_use[i])
                            {
                                case 1:
                                    path = "/ms0/MUSIC";
                                    break;
                                case 2:
                                    path = "/ms0/MUSIC/GTPSP";
                                    break;
                            }
                            self.sysbgm_valid[i] = false;
                            if (path != nil)
                            {
                                main::pdiext::MSystemBGM::openDirectory(path);
                                var bytedata = main::pdiext::MSystemBGM::getContext();
                                if (bytedata != nil)
                                {
                                    self.sysbgm_context[i] = bytedata;
                                    self.sysbgm_valid[i] = true;
                                }
                            }
                            p.sysbgm_use[i] = self.sysbgm_use[i];
                            p.sysbgm_valid[i] = self.sysbgm_valid[i];
                            p.sysbgm_context[i] = self.sysbgm_context[i];
                        }



                        main::sound.menu_se_volume =
                            self.menu_se ? p.menu_se_gain * preset['menu_se_master_volume'] : 0.0;



                        if (main["sound_context"] != nil)
                        {
                            set_output_mode(0, self.mode_speaker, self.eq_speaker, preset['output_gain']);
                            set_output_mode(1, self.mode_headphone, self.eq_headphone, preset['output_gain_headphone']);
                        }
                    }
                }
            }




            method hasFavoriteCourse()
            {
                for (var i = 0; i < 35; i++)
                {
                    if (self.favorite_courses[i] != main::gtengine::MSpecDB::NO_CODE64)
                        return true;
                }
                return false;
            }




            method getFavoriteCourses()
            {
                var result = [];
                for (var i = 0; i < 35; i++)
                {
                    if (self.favorite_courses[i] != main::gtengine::MSpecDB::NO_CODE64)
                        result.push(self.favorite_courses[i]);
                }
                return result;
            }
        }

    }
}