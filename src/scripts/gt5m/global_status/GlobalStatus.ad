














module GlobalStatus
{


















    static VERSION = 114;











    function get_wrapper()
    {
        var st = STStructure();
        st.define("version", STInt());
        st.define("buffer", STObject(ByteData));
        st.define("journal", STObject(ByteData));

        st.define("crc", STUInt());
        st.define("_car", STObject(gtengine::MCarParameter));
        st.define("_arcade_car", STObject(gtengine::MCarParameter));
        st.define("garage", STObject(gtengine::MCarCollection));
        st.define("calendar", STObject(gtengine::MCalendar));
        st.define("key_config", STObject(gtengine::MController));
        st.define("default_psp", STObject(System::Map));

        return st();
    }







    function create()
    {
        var st = CreateModule::CreateStructure();




        var instance = st();


        CreateModule::Initialize(instance);



        return instance;
    }




    function pack(data)
    {

        var buffer = data.serialize();


        var wrapper = get_wrapper();
        wrapper.version = VERSION;
        wrapper.buffer = buffer;
        wrapper.journal = "dummy";

        wrapper.crc = data.getTypeCRC();
        wrapper._car = data.user_profile.context._car;
        wrapper._arcade_car = data.user_profile.context._arcade_car;
        wrapper.garage = data.user_profile.garage;
        wrapper.calendar = data.user_profile.calendar;
        wrapper.key_config = data.user_profile.option.key_config;
        wrapper.default_psp = data.user_profile.option.default_psp;



        var packed_data = wrapper.serialize();



        packed_data = main::pdistd::Deflate(packed_data);


        return packed_data;
    }




    function unpack(packed_data, target)
    {
        var instance = target;
        if (instance == nil)
            instance = create();

        var success = false;


        packed_data = main::pdistd::Inflate(packed_data);


        var wrapper = get_wrapper();
        wrapper.deserialize(packed_data);
        var version = wrapper.version;
        var buffer = wrapper.buffer;
        var journal = wrapper.journal;

        if (version != VERSION)
        {
        }
        else
        {

            if (wrapper.crc != instance.getTypeCRC())
            {
            }
            else
            {




                instance.deserialize(buffer);


                if (wrapper._car != nil)
                    instance.user_profile.context._car = wrapper._car;
                if (wrapper._arcade_car != nil)
                    instance.user_profile.context._arcade_car = wrapper._arcade_car;
                if (wrapper.garage != nil)
                    instance.user_profile.garage = wrapper.garage;
                if (wrapper.calendar != nil)
                    instance.user_profile.calendar = wrapper.calendar;
                if (wrapper.key_config != nil)
                    instance.user_profile.option.key_config = wrapper.key_config;
                if (wrapper.default_psp != nil)
                    instance.user_profile.option.default_psp = wrapper.default_psp;

                success = true;
            }
        }
        !success; // Something not entirely commented out?


        return [instance, success];
    }




    function clearInitializer()
    {
        CreateModule.clearStatic();
        UserProfile::clearInitializer();
        GameConfig::clearInitializer();
    }







    module CreateModule
    {
        function CreateStructure()
        {



            var st = STStructure("Impl");

            st.archive_byte_data = true;

            GlobalStatus.defineModule(st);
            st.define("user_profile", UserProfile::CreateModule::CreateStructure());
            st.define("config", GameConfig::CreateModule::CreateStructure());
            if (main.defined("BranchStatus") && main::BranchStatus.defined("CreateModule"))
            {

                st.define("branch", BranchStatus::CreateModule::CreateStructure());
            }

            DefineMethod();
            return st;
        }




        function Initialize(instance)
        {

            UserProfile::CreateModule::Initialize(instance.user_profile);

            GameConfig::CreateModule::Initialize(instance.config);


            if (main.defined("BranchStatus") && main::BranchStatus.defined("CreateModule"))
            {
                BranchStatus::CreateModule::Initialize(instance.branch);
            }
        }
    }






    function DefineMethod()
    {

        module Impl
        {








            method apply()
            {

                self.user_profile.apply();
            }




            method setGameContext(gc)
            {
                self.user_profile.setGameContext(gc);
            }




            method getGameContext(gc)
            {
                self.user_profile.getGameContext(gc);
            }
        }
    }
}