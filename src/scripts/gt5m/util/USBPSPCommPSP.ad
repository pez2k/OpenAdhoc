














import main::DialogUtil;

module USBPSPCommPSP
{
    module RETCODE
    {
        static WAIT_CONNECT = 2;
        static RUNNING = 1;
        static SUCCESS = 0;
        static FAILED_CONNECT = -1;
        static FAILED_EXPORT = -2;
    }

    static sCurrentProject = nil;
    static sWatcher = nil;
    static sWatcherRunning = false;
    static sUsbcm = main::pdiext::MUsbPspCommPSP();

    class DataForExport
    {
        attribute titleId;
        attribute buf;
    }




    function onTick(context)
    {
        if (!sWatcherRunning)
            return;

        if (sUsbcm.syncUSB != RETCODE::WAIT_CONNECT)
        {
            sWatcherRunning = false;
            DialogUtil::cancelConfirmDialog(context);
        }
    }












    function _exportData(context, data)
    {
        var PROJECT = sCurrentProject;

        var ret = sUsbcm.beginUSBExportData(data.titleId, data.buf);

        sWatcher = WatcherUtil::Create(context, onTick, 1);
        sWatcherRunning = false;

        var success = false;
        if (ret != 0)
        {
            DialogUtil::openConfirmDialog(context, 2,
                                          context.translate(PROJECT,
                                                            "USBPSPCommPSP",
                                                            "ERROR_FAILED_INIT_USB"));
            return success;
        }

        var loop = true;

        do
        {
            ret = sUsbcm.syncUSB;

            switch (ret)
            {
                case RETCODE::SUCCESS:
                    sWatcherRunning = false;
                    loop = false;
                    success = true;
                    break;

                case RETCODE::FAILED_CONNECT:
                    sWatcherRunning = false;
                    DialogUtil::openConfirmDialog(context, DialogUtil::ERROR,
                                                  context.translate(PROJECT,
                                                                    "USBPSPCommPSP",
                                                                    "ERROR_FAILED_CONNECT_USB"));
                    loop = false;
                    success = false;
                    break;

                case RETCODE::FAILED_EXPORT:
                    sWatcherRunning = false;
                    DialogUtil::openConfirmDialog(context, DialogUtil::ERROR,
                                                  context.translate(PROJECT,
                                                                    "USBPSPCommPSP",
                                                                    "ERROR_FAILED_EXPORT_USB"));
                    loop = false;
                    success = false;
                    break;

                case RETCODE::WAIT_CONNECT:
                    sWatcherRunning = true;
                    var res = DialogUtil::openConfirmDialog(context, DialogUtil::ABORT,
                                                            context.translate(PROJECT,
                                                                              "USBPSPCommPSP",
                                                                              "WAIT_CONNECT_USB"));
                    if (!res && sWatcherRunning)
                    {
                        var abort = DialogUtil::openConfirmDialog(context, DialogUtil::QUERY,
                                                                  context.translate(PROJECT,
                                                                                    "USBPSPCommPSP",
                                                                                    "DO_YOU_ABORT_TO_EXPORT"));
                        if (abort)
                        {
                            loop = false;
                            success = false;
                        }
                    }
                    break;

                case RETCODE::RUNNING:
                    sWatcherRunning = false;
                    break;
            }
        }
        while (loop);

        if (sWatcher != nil)
        {
            WatcherUtil::Delete(sWatcher);
            sWatcher = nil;
        }


        sUsbcm.endUSBExportData();
        return success;
    }


    function _exportDataStart(context, args)
    {
        var success = _exportData(context, args);
        return success;
    }










    function exportDataToPS3(context, data, project)
    {
        sCurrentProject = project;
        var PROJECT = sCurrentProject;

        var res = false;


        res = DialogUtil::openConfirmExecDialog(context,
                                                nil,
                                                context.translate(PROJECT, "USBPSPCommPSP", "NOW_EXPORT"),
                                                context.translate(PROJECT, "USBPSPCommPSP", "EXPORT_DONE"),
                                                context.translate(PROJECT, "USBPSPCommPSP", "EXPORT_NOT_DONE"),
                                                _exportDataStart,
                                                data);

        sCurrentProject = nil;

        return res;
    }
}