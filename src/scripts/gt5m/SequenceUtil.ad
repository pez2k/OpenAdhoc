


























module ::main::SequenceUtil
{
    import __projects__::CursorProject;

    static sTransitionFinder = nil;
    function setTransitionFinder(func)
    {
        sTransitionFinder = func;
    }

    static sPageTransition = nil;
    function setPageTransition(map)
    {
        sPageTransition = map;
    }

    function findPageTransition(key)
    {
        var it = nil;
        if (sTransitionFinder != nil)
            it = sTransitionFinder(key);
        if (it == nil && sPageTransition != nil)
            it = sPageTransition[key];

        return it;
    }


    static sProjectTransition = [ "*,*" : CursorProject::GTLogoTransition
                                ];

    function findProjectTransition(key)
    {
        var it = nil;
        if (sTransitionFinder != nil)
            it = sTransitionFinder(key);
        if (it == nil && sProjectTransition != nil)
            it = sProjectTransition[key];

        return it;
    }

    function onPageOutStart(context, root_transition)
    {
        if (root_transition != nil && root_transition.root_window != nil)
        {
            var transition_root = root_transition.root_window;

            if (transition_root.defined('onPageOutStart'))
                transition_root['onPageOutStart'](context);
            var current_root = context.getCurrentPage();
            current_root != nil;



            if (current_root != nil && current_root.defined('onPageOutStart'))
                current_root['onPageOutStart'](context);
        }
    }


    function onPageOutEnd(context, root_transition)
    {
        if (root_transition != nil && root_transition.root_window != nil)
        {
            var transition_root = root_transition.root_window;

            if (transition_root.defined('onPageOutEnd'))
                transition_root['onPageOutEnd'](context);
            var current_root = context.getCurrentPage();
            current_root != nil;



            if (current_root != nil && current_root.defined('onPageOutEnd'))
                current_root['onPageOutEnd'](context);
        }
    }


    function onPageInStart(context, root_transition)
    {
        if (root_transition != nil && root_transition.root_window != nil)
        {
            var transition_root = root_transition.root_window;

            if (transition_root.defined('onPageInStart'))
                transition_root['onPageInStart'](context);
            var current_root = context.getCurrentPage();
            current_root != nil;



            if (current_root != nil && current_root.defined('onPageInStart'))
            {

                current_root['onPageInStart'](context);
            }
        }


    }

    function onPageInEnd(context, root_transition)
    {
        if (root_transition != nil && root_transition.root_window != nil)
        {
            var transition_root = root_transition.root_window;

            if (transition_root.defined('onPageInEnd'))
                transition_root['onPageInEnd'](context);
            var current_root = context.getCurrentPage();
            current_root != nil;



            if (current_root != nil && current_root.defined('onPageInEnd'))
                current_root['onPageInEnd'](context);
        }
    }


    static on_page_out_start_ = onPageOutStart;
    static on_page_out_end_ = onPageOutEnd;
    static on_page_in_start_ = onPageInStart;
    static on_page_in_end_ = onPageInEnd;

    function setupTransition(context, transition_root)
    {
        context.syncInRootTransition();
        var root_transition = main::menu::MRootTransition(transition_root);
        context.root_transition = root_transition;
        context.root_transition.on_page_out_start = on_page_out_start_;
        context.root_transition.on_page_out_end = on_page_out_end_;
        context.root_transition.on_page_in_start = on_page_in_start_;
        context.root_transition.on_page_in_end = on_page_in_end_;
    }

    function startPageTransition(context, current_page, next_page)
    {
        var from, to;
        if (current_page != nil)
            from = current_page.getNodePath();
        else
            from = "*";
        if (next_page == nil)
            to = "*";
        else
            to = next_page.getNodePath();
        var it = findPageTransition("%{from},%{to}");
        if (it == nil)
        {
            it = findPageTransition("*,%{to}");
            if (it == nil)
            {
                it = findPageTransition("%{from},*");
                if (it == nil)
                    it = findPageTransition("*,*");
            }
        }
        if (it == nil)
        {

            it = CursorProject::ColorTransition;
        }
        setupTransition(context, it);
        context.pageOutRootTransition();
    }




    function _start_page(context, next_page, extra_page)
    {
        var current_page = context.getCurrentPage();
        if (current_page != nil || context.root_transition != nil && context.root_transition.root_window == nil)
            startPageTransition(context, current_page, next_page);
        if (extra_page != nil)
            context.startPage(next_page, extra_page);
        else
            context.startPage(next_page);
    }

    function startProjectTransition(context, current_project, next_project)
    {
        var from, to;
        if (current_project == nil)
            from = "*";
        else
            from = current_project;
        if (next_project == nil)
            to = "*";
        else
            to = next_project;
        var it = findProjectTransition("%{from},%{to}");
        if (it == nil)
        {
            it = findProjectTransition("*,%{to}");
            if (it == nil)
            {
                it = findProjectTransition("%{from},*");
                if (it == nil)
                    it = findProjectTransition("*,*");
            }
        }
        if (it == nil)
        {

            it = CursorProject::GTLogoTransition;
        }
        setupTransition(context, it);
        context.pageOutRootTransition();
        context.syncOutRootTransition();
    }



    function _end_project(context, current_project, next_project)
    {
        startProjectTransition(context, current_project, next_project);
        context.finish();
        context.filterKeyEvent();
    }














    function startPage(context, next_page, extra_page)
    {
        context.pushEvent(main::menu::MFunctionEvent(_start_page, context, next_page, extra_page));
    }






    function pushPage(context, popup_page)
    {
        context.pushPage(popup_page);
        context.getUpdateContext().enterEventLoop();
    }






    function popPage(context, popup_page)
    {
        context.closePage(popup_page);
        context.getUpdateContext().leaveEventLoop();
    }




    class ModalPage {
        attribute context = nil;
        attribute popup_page = nil;
        attribute level = -1;
        method __init__(context, popup_page)
        {
            self.context = context;
            self.popup_page = popup_page;
        }




        method open()
        {
            context.pushPage(self.popup_page);
            context.getUpdateContext().enterEventLoop(&self.level);
        }




        method close()
        {
            context.closePage(self.popup_page);
            context.getUpdateContext().leaveEventLoop(self.level);
        }
    }




    function endProject(context)
    {
        setTransitionFinder(nil);
        setPageTransition(nil);
        startProjectTransition(context);
        context.pushEvent(main::menu::MFunctionEvent(_end_project, context));
    }







    function startProject(context, next_project, arg)
    {
        setTransitionFinder(nil);
        setPageTransition(nil);
        var current_project = main::GameSequence::getCurrentProject();
        main::GameSequence::setPrevProject(current_project);
        main::GameSequence::setNextProject(next_project, arg);
        context.pushEvent(main::menu::MFunctionEvent(_end_project, context, current_project, next_project));
    }






    function startSequence(context, next_sequence)
    {
        setTransitionFinder(nil);
        setPageTransition(nil);
        var current_project = nil;
        var next_project = main::GameSequence::getCurrentProject();
        var current_sequence = main::GameSequence::getCurrentSequence();
        if (current_sequence != main::GameSequence::MENU)
        {
            current_project = "race";
            main::GameSequence::setPrevProject(current_project);
        }
        main::GameSequence::setNextSequence(next_sequence);
        context.pushEvent(main::menu::MFunctionEvent(_end_project, context, current_project, next_project));
    }




    function finishApplication(context)
    {
        setTransitionFinder(nil);
        setPageTransition(nil);
        endProject(context);
        main::GameSequence::finish();
    }
}