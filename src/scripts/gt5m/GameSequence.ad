





















module ::main::GameSequence
{
    static UNDEFINED = 0;
    static MENU = 1;
    static SINGLE_RACE = 2;
    static ONLINE_BATTLE = 3;

    static RACE = 4;
    static REPLAY_THEATER = 5;
    static LEAVE_DEMO = 6;
    static BEHAVIOR = 100;



    var st = STStructure();
    st.define("finished", STInt());
    st.define("current_sequence", STInt());
    st.define("prev_sequence", STInt());
    st.define("current_mode", STInt());
    st.define("prev_mode", STInt());
    st.define("current_project", STString(16));
    st.define("prev_project", STString(16));
    st.define("arg", STString(32));
    st.define("result", STString(32));
    st.define("prev_page", STString(32));
    st.define("prev_page_arg", STString(32));


    static context = st();
    context.data = [
        "finished" : false,
        "current_sequence" : MENU,
        "prev_sequence" : UNDEFINED,
        "current_mode" : MENU,
        "prev_mode" : UNDEFINED,
        "current_project" : "boot",
        "prev_project" : "undefined",
        "arg" : "",
        "result" : "",
        "prev_page" : "undefined",
        "prev_page_arg" : ""
    ];

    static argument = nil;


    function setNextSequence(sequence)
    {
        context.prev_sequence = context.current_sequence;
        context.current_sequence = sequence;
    }


    function setMode(mode)
    {
        context.prev_mode = context.current_mode;
        context.current_mode = mode;
    }


    function setArgument(arg)
    {
        context.arg = arg == nil ? "" : arg.toString();
    }


    function setNextProject(project, arg)
    {
        context.prev_project = context.current_project;
        context.current_project = project;
        setArgument(arg);
    }
    function setPrevProject(project)
    {
        context.prev_project = project;
    }

    function getCurrentSequence()
    {
        return context.current_sequence;
    }

    function getCurrentMode()
    {
        return context.current_mode;
    }

    function getCurrentProject()
    {
        return context.current_project;
    }
    function getPrevProject()
    {
        return context.prev_project;
    }

    function setPrevPage(string, arg)
    {
        context.prev_page = string;
        context.prev_page_arg = arg == nil ? "" : arg.toString();
    }

    function getPrevPage()
    {
        return context.prev_page;
    }
    function getPrevPageArgument()
    {
        return context.prev_page_arg;
    }

    function getArgument()
    {
        return context.arg;
    }

    function setResult(value)
    {
        context.result = value;
    }

    function getResult()
    {
        return context.result;
    }






    function setArgumentObject(arg)
    {
        argument = arg;
    }
    function getArgumentObject()
    {
        return argument;
    }


    function finish()
    {
        context.finished = true;
    }










    function executeRace(arg)
    {
        setArgument(arg);
        setResult("");
        MGOM.start("race", ORG);
        MGOM.sync();
        return getResult();
    }







    static is_gp_nil = true;
    static packed_game_plan = ByteData(16, 32 * 0x400);




    function setGamePlan(game_plan)
    {
        if (game_plan != nil)
        {
            var xml = game_plan.createXML(true);
            var packed_data = main::pdistd::Deflate(xml);
            packed_game_plan.setByteData(packed_data);
            is_gp_nil = false;
        }
        else
        {
            is_gp_nil = true;
        }
    }




    function getGamePlan()
    {
        if (is_gp_nil)
            return nil;
        
        var gp = main::GamePlan();
        var unpacked_data = main::pdistd::Inflate(packed_game_plan);
        gp.parseXML(unpacked_data);
        return gp;
    }




























    static replay_buffer = nil;
    static is_replay_buffer_filled = false;




    function allocateReplayBuffer()
    {
        if (replay_buffer == nil)
            replay_buffer = ByteData(16, 0xC0 * 0x400);
        is_replay_buffer_filled = false;
    }





    function fillReplayBuffer(buf)
    {

        replay_buffer.setByteData(buf.getByteData());
        is_replay_buffer_filled = true;
        main::ORG.beginExternalReplayBuffer(replay_buffer);
        return replay_buffer;
    }




    function endUsedReplayBuffer()
    {
        if (is_replay_buffer_filled)
        {
            main::ORG.endExternalReplayBuffer();
        }
    }




    function freeUnusedReplayBuffer()
    {
        if (!is_replay_buffer_filled)
            replay_buffer = nil;
    }
}