



































module ::main
{
    static sound_context;
    static race_sound;
    static drc_preset;
    static sound_runtime_parameter;




    module CarSound
    {

        static sound_id_volume = [
            [1.0, 1.0],
            [1.0, 1.0],
            [1.12, 1.12],
            [1.26, 1.26]
        ];


        class RoadAttributeSoundParameter
        {
            attribute effects = nil;

            method __init__(_effects)
            {
                self.effects = _effects;
            }
        }


        class SoundEffect
        {
            attribute instrument = nil;
            attribute controls = nil;
            attribute category = nil;

            method __init__(_inst, _ctrls, _cat)
            {
                self.instrument = _inst;
                self.controls = _ctrls;
                self.category = _cat;
            }

            method set(s)
            {
                self.instrument = s.instrument;
                self.controls = s.controls;
                self.category = s.category;
            }
        }


        class SoundEffectInstrument
        {
            attribute type = nil;
            attribute name = nil;
            attribute gain = nil;
            attribute pitch = nil;

            method __init__(_type, _name, _gain, _pitch)
            {
                self.type = _type;
                self.name = _name;
                self.gain = _gain;
                self.pitch = _pitch;
            }
        }


        class SoundEffectControl
        {
            attribute graph = nil;
            attribute type = nil;
            attribute extrapolate = nil;
            attribute input = nil;
            attribute output = nil;

            method __init__(_graph, _type, _extrapolate, _input, _output)
            {
                self.graph = _graph;
                self.type = _type;
                self.extrapolate = _extrapolate;
                self.input = _input;
                self.output = _output;
            }
        }

        static road_attribute_sound_parameter = Array(16);
        
        #include "scripts/gt5m/road_sound_autogen.ad" // Actually "scripts/gt5/road_sound_autogen.ad" in original, but makes a mess of this repo


        function InitializeRoadAttributeSoundParameter()
        {
            for (var attr_index = 0; attr_index < road_attribute_sound_parameter.size; attr_index++)
            {
                var rasp = road_attribute_sound_parameter[attr_index];

                for (var ch = 0; ch < rasp.effects.size; ch++)
                {
                    var e = rasp.effects[ch];
                    gtengine::MRaceSound::setRoadAttributeSoundParameter(attr_index, ch,
                                                                         e.instrument,
                                                                         e.controls);
                }
            }
            main::gtengine::MRaceSound::initializeGlobalParameter();
        }

        InitializeRoadAttributeSoundParameter();
    }
}




function InitializeSound()
{





    main::pdiext::MEngineSound::loadPreset("roadnoiz", "sound_gt/se/roadnoiz.esgx");




    main::pdiext::MEngineSound::loadPreset("squeal2", "sound_gt/se/squeal2.esgx");



    main::sound_runtime_parameter = NewSoundRuntimeParameter();







    main::sound_context = pdiext::MSoundContext();


    main::drc_preset = [

        [
            'bgm_master_volume' : 0.5,
            'menu_se_master_volume' : 0.84,

            'movie_master_volume' : 0.71,
            'na_master_volume' : 0.71,
            'agc_exp' : 0.6,
            'agc_gain' : 1.0,
            'output_gain' : 1.41,
            'output_gain_headphone' : 1.41
        ],

        [
            'bgm_master_volume' : 0.35,
            'menu_se_master_volume' : 0.6,

            'movie_master_volume' : 0.71,
            'na_master_volume' : 0.5,
            'agc_exp' : 0.2,
            'agc_gain' : 1.0,
            'output_gain' : 1.41,
            'output_gain_headphone' : 1.41
        ]
    ];




    {
        main::sound_context.spu_effect_type = "studio_c";
        main::sound_context.spu_effect_depth = 1.0;
        main::sound_context.spu_effect_delay = 1.0;
        main::sound_context.spu_effect_feedback = 0.0;

        main::sound_context.reference_distance = 3.0;
        main::sound_context.interior_pan_distance = 2.5;
        main::sound_context.master_reverb_level = 1.41;
        main::sound_context.sound_driver_volume_scale = 1.0;





        main::sound_context.voice_agc_comp_rate = 10.0;
        main::sound_context.voice_agc_exp_rate = 2.0;
        main::sound_context.voice_agc_limit = 1.41;
    }









    main::ORG.setSoundContext(sound_context);

    {
        main::race_sound = main::gtengine::MRaceSound();

        main::race_sound.engine_lpf_gain = [0.85, 0.15, 0.0, 0.0];
        main::race_sound.muffler_lpf_gain = [0.85, 0.15, 0.0, 0.0];

        main::race_sound.audience_volume = 0.89;
        main::race_sound.ambience_volume = 0.89;
        main::race_sound.audience_ref_distance = 40.0;
        main::race_sound.ambience_ref_distance = 80.0;
    }
    main::ORG.setRaceSound(race_sound);


    main::gtengine::MRaceSound::initializeGlobalParameter();


    if (GetVersionBranch() != "mviewer")
    {
        main::DebugTool::printHeapStatus();
        main::CarSound.clearStatic();
        main::DebugTool::printHeapStatus();
    }


}









function CreateSoundRuntimeParameterStructure()
{
    var st = STStructure("Impl");


    st.define("menu_bgm", STByte());
    st.define("menu_se", STByte());
    st.define("race_bgm", STByte());
    st.define("race_se", STByte());
    st.define("replay_bgm", STByte());
    st.define("replay_se", STByte());
    st.define("sound_dynamic_range", STByte());


    st.define("menu_bgm_gain", STFloat());
    st.define("menu_se_gain", STFloat());
    st.define("race_bgm_gain", STFloat());
    st.define("race_se_gain", STFloat());
    st.define("replay_bgm_gain", STFloat());
    st.define("replay_se_gain", STFloat());
    st.define("user_bgm_gain", STFloat());
    st.define("movie_gain", STFloat());
    st.define("na_gain", STFloat());


    st.define("sysbgm_use", STArray(STByte(), 8));
    st.define("sysbgm_valid", STArray(STByte(), 8));
    st.define("sysbgm_context", STArray(STArray(STByte(), main::pdiext::MSystemBGM::getContextSize()), 8));

    return st;
}

function InitializeSoundRuntimeParameter(p)
{
    p.menu_bgm = 1;
    p.menu_se = 1;
    p.race_bgm = 1;
    p.race_se = 1;
    p.replay_bgm = 1;
    p.replay_se = 1;
    p.sound_dynamic_range = 0;
    p.menu_bgm_gain = 1.0;
    p.menu_se_gain = 1.0;
    p.race_bgm_gain = 1.0;
    p.race_se_gain = 1.0;
    p.replay_bgm_gain = 1.0;
    p.replay_se_gain = 1.0;
    p.user_bgm_gain = 1.0;
    p.movie_gain = 1.0;
    p.na_gain = 1.0;

    for (var i = 0; i < 8; i++)
    {
        p.sysbgm_use[i] = 0;
        p.sysbgm_valid[i] = 0;
    }
}

function NewSoundRuntimeParameter()
{
    var st = CreateSoundRuntimeParameterStructure();
    var instance = st();
    InitializeSoundRuntimeParameter(instance);
    return instance;
}