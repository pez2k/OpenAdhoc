
















module GameContext
{
















    function CreateStructure()
    {
        var st = STStructure("Impl");
        GameContext.defineModule(st);

        st.define("_car", STObject(gtengine::MCarParameter));
        st.define("course", STULong());
        st.define("game_mode", STByte());
        st.define("_arcade_car", STObject(gtengine::MCarParameter));
        st.define("arcade_course", STULong());
        st.define("arcade_game_mode", STByte());
        st.define("drift_type", STByte());
        st.define("course_id", STString(16));
        st.define("course_layout", STInt());
        st.define("race_difficulty", STByte());
        st.define("penalty_level", STByte());
        st.define("one_make", STByte());
        st.define("battle_phase", STByte());
        st.define("battle_room_no", STByte());
        st.define("battle_join_mode", STByte());
        st.define("battle_laps", STByte());
        st.define("battle_disable_collision", STByte());
        st.define("battle_boost", STByte());
        st.define("battle_prev_order", STByte());
        st.define("battle_prev_number", STByte());
        st.define("battle_renchan_num", STByte());
        st.define("battle_auto_drive", STByte());
        st.define("garage_view_mode", STByte());
        st.define("collection_view_mode", STByte());
        st.define("course_view_mode", STByte());


        st.define("manual", STByte());
        st.define("assist_asm", STByte());
        st.define("assist_tcs", STByte());
        st.define("physics_pro", STByte());
        st.define("driving_line", STInt());


        st.define("license_id", STShort());


        st.define("need_save", STByte());
        st.define("gametop_focus_index", STByte());
        st.define("is_theater", STByte());

        st.define("msg_count_lets_buy_car", STByte());
        st.define("msg_count_lets_play_arcade", STByte());
        st.define("msg_count_enable_ending", STByte());

        DefineMethod();
        return st;
    }





    function Initialize(instance)
    {
        instance._car = main::gtengine::MCarParameter();
        instance.course = main::gtengine::MSpecDB::NO_CODE64;
        instance.game_mode = -1;

        instance._arcade_car = main::gtengine::MCarParameter();
        instance.arcade_course = main::gtengine::MSpecDB::NO_CODE64;
        instance.arcade_game_mode = -1;

        instance.course_id = "";
        instance.course_layout = 0;
        instance.race_difficulty = 0;
        instance.penalty_level = 0;
        instance.one_make = false;
        instance.drift_type = 0;
        instance.battle_phase = 0;
        instance.battle_room_no = 0;
        instance.battle_join_mode = false;
        instance.battle_laps = 1;
        instance.battle_disable_collision = false;
        instance.battle_boost = 1;
        instance.battle_prev_order = -1;
        instance.battle_prev_number = -1;
        instance.battle_renchan_num = 0;
        instance.battle_auto_drive = false;
        instance.garage_view_mode = -1;
        instance.collection_view_mode = -1;
        instance.course_view_mode = -1;

        instance.manual = false;
        instance.assist_asm = true;
        instance.assist_tcs = 5;
        instance.physics_pro = 0;
        instance.driving_line = true;

        instance.license_id = -1;

        instance.need_save = false;
        instance.gametop_focus_index = -1;
        var is_theater = false; // mistake accurate to the original script

        instance.msg_count_lets_buy_car = 0;
        instance.msg_count_lets_play_arcade = 0;
        instance.msg_count_enable_ending = 0;
    }






    function DefineMethod()
    {

        module Impl
        {
            method setCar(cp)
            {
                self._car.deepCopy(cp);
            }

            method getCar()
            {
                return self._car;
            }

            method setArcadeCar(cp)
            {
                self._arcade_car.deepCopy(cp);
            }

            method getArcadeCar()
            {
                return self._arcade_car;
            }
        }
    }
}